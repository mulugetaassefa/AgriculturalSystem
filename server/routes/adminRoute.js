const express = require('express');
const adminRouter = express.Router();
const user = require("../models/userModels");
const bcrypt = require("bcryptjs");
const jwt =require("jsonwebtoken");
const investor =require("../models/investorModel");
const report=require('../models/reportModel');
const  branch =require('../models/branchModel');
const branchStaff =require('../models/branchStaffModel');
const authMiddleware =require("../middleware/authMiddleware");
const investorModel = require('../models/investorModel');
const userModel = require('../models/userModels');
  
// create branch   

adminRouter.post('/create-branch', async (req, res) => {
  try {
    const branchExist = await branch.findOne({ branchId: req.body.branchId });
    if (branchExist) {
      return res.status(200).send({ message: "Branch already exists", success: false });
    } else {
      const newBranch = new branch(req.body);
      await newBranch.save();
      res.status(200).send({ message: "Branch created successfully", success: true });
    }
  } catch (error) {
    console.log(error);
    return res.status(500).send({ message: "Error occurred while creating branch. Please try again!", success: false });
  }
});


// delete branch 
 adminRouter.delete('/delete-branch/:id', async (req, res) => {
  try {
       const deletedBranch =await branch.findByIdAndDelete(req.params.id);
       if(deletedBranch) {
       res.status(200).send({message :"Branch deleted successfully", success: true, data: deletedBranch});
       } else {
        res.status(404).send({ message: "Branch not found", success: false });
       }
  } catch (error) {
    console.log(error);
    return res.status(500).send({ message: "Error on deleting branch", success: false });
  }
});


 // update branch by id
adminRouter.put('/branch-update/:inputId', async (req, res) => {
  try {
    const updatedBranch = await branch.findByIdAndUpdate(req.params.inputId, req.body, { new: true });
    if (updatedBranch) {
      res.status(200).send({ message: "Branch updated successfully", success: true, data: updatedBranch });
    } else {
      res.status(404).send({ message: "Branch not found", success: false });
    }
  } catch (error) {
    res.status(500).send({ message: "Error updating branch", success: false });
  }
});

// get branch by id
adminRouter.get('/branch/:id', async (req, res) => {
  try {
    const Branch = await branch.findOne({ _id: req.params.id });

    if (Branch) {
      res.status(200).send({ message: "Branch retrieved successfully", success: true, data: input });
    } else {
      res.status(404).send({ message: "Branch not found", success: false });
    }
  } catch (error) {
    res.status(500).send({ message: "Error retrieving branch data", success: false });
  }
});

// View reports generated by storage manager
adminRouter.get('/view-reports', async (req, res) => {
  try {
    const reports = await report.find({ generatedBy: 'storageManager' }).populate('generatedBy');
    res.status(200).json({ success: true, data: reports });
  } catch (error) {
    console.error('Error fetching reports:', error);
    res.status(500).json({ message: 'Error fetching reports', success: false });
  }
});

//  get all branch
  adminRouter.get('/getAllBranches', async (req, res) => {
     
      try {
        const  branches =await  branch.find({});
        res.status(200).send({
          success: true,
          message: "Branch Data List",
          data: branches,
        });
      } catch (error) {
        console.log(error);
        res.status(500).send({
          success: false,
          message: "Branch does not exist",
          error,
        });
      }
    });
  


  // get all brachStaff
   adminRouter.get('/get-branchStaff', async (req,res) => {
     let branchStaffs;
     try {
        branchStaffs =await  branchStaff.find();
     } catch (error) {
        return console.log(error);
     }

     if(!branchStaffs) {
      return res.status(404).json({message: "No found any branchSttaf "})
     }
   return res.status(200).json({branchStaffs});
   });


// aprove investor account
   adminRouter.post('/changeAccountStatus', authMiddleware, async (req, res) => {
    try {
        const { investorId, status} =req.body;
        const investor =await investorModel.findByIdAndUpdate(investorId, {status})
        const user =await userModel.findOne({_id:investor.userId})
        const unseenNotification =user.unseenNotification
        unseenNotification.push({
          type: 'investor-account-request-update',
          message: 'Your Investor Account Request has ${status}',
          onClickPath: '/notification'
        })
        user.isInvestor ==='aproved' ? true : false 
        await user.save();
        res.status(201).send({
          success: true,
          message: 'Account status Updated',
          data: investor,
        })
      } catch (error) {
      console.log(error)
      res.status(500).send({
        success: false,
        message: 'Error occur in changeing user account',

      })
    }
   });
   
  // get all investors
    adminRouter.get('/getAllInvestors', authMiddleware, async (req, res) => {  
    try {
       const investors=await investorModel.find({});
       res.status(200).send({
        success: true,
        message: "Investor data list",
        data: investors,
       });
    } catch (error) {
       console.log(error);
       res.status(500).send({
        success: false,
        message: 'error while fetching investors',
        error,
       });
    }
  });

  module.exports = adminRouter;