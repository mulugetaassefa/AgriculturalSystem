const express = require('express');
const router = express.Router();
const user = require("../models/userModels");
const bcrypt = require("bcryptjs");
const jwt =require("jsonwebtoken");
const investor =require("../models/investorModel");
const report=require('../models/reportModel');
const  branch =require('../models/branchModel');
const branchStaff =require('../models/branchStaffModel');

  
// create branch   

router.post('/create-branch', async (req, res) => {
  try {
    const branchExist = await branch.findOne({ branchId: req.body.branchId });
    if (branchExist) {
      return res.status(200).send({ message: "Branch already exists", success: false });
    } else {
      const newBranch = new branch(req.body);
      await newBranch.save();
      res.status(200).send({ message: "Branch created successfully", success: true });
    }
  } catch (error) {
    console.log(error);
    return res.status(500).send({ message: "Error occurred while creating branch. Please try again!", success: false });
  }
});

// delete branch 
router.post('/delete-branch/:id', async (req, res) => {
  try {
       const deletedBranch =await branch.findByIdAndDelete(req.params.id);
       if(deletedBranch) {
       res.status(200).send({message :"Branch deleted successfully", success: true, data: deletedBranch});
       } else {
        res.status(404).send({ message: "Branch not found", success: false });
       }
  } catch (error) {
    console.log(error);
    return res.status(500).send({ message: "Error on deleting branch", success: false });
  }
});


 // update branch by id
router.put('/branch-update/:id', async (req, res) => {
  try {
    const updatedBranch = await branch.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (updatedBranch) {
      res.status(200).send({ message: "Branch updated successfully", success: true, data: updatedBranch });
    } else {
      res.status(404).send({ message: "Branch not found", success: false });
    }
  } catch (error) {
    res.status(500).send({ message: "Error updating branch", success: false });
  }
});

// View reports generated by storage manager
router.get('/view-reports', async (req, res) => {
  try {
    const reports = await report.find({ generatedBy: 'storageManager' }).populate('generatedBy');
    res.status(200).json({ success: true, data: reports });
  } catch (error) {
    console.error('Error fetching reports:', error);
    res.status(500).json({ message: 'Error fetching reports', success: false });
  }
});


  module.exports = router;